import javax.swing.*;
import java.awt.*;
import java.util.Scanner;
import java.awt.geom.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * Slap21 virus.
 *
 * @author (Ari)
 * @version (16/06/25)
 */
public class Slap21 extends JFrame
{
    int frameWidth = 1000;
    int frameHeight = 650;
    int imageX = 500;
    int  imageY = 325;
    String title = "Slap-21 Virus Simulation";
    Timer timer; // Declare the timer as an instance variable
    
    ArrayList<Point> blackCircles = new ArrayList<>();
    ArrayList<Point> greenCircles = new ArrayList<>();
    public Slap21()
    {
        Scanner scanner = new Scanner(System.in);
        System.out.println("-----Welcome to Slap-21-----");
        System.out.println("\nThis is a simulation of a virus in a population \nIn this population one person has a virus and you are watching it spread \nHere are some variables you can change to personalise the experience");
        
        System.out.println("\nHow many generations would you like to run?");
        int numOfGens = scanner.nextInt();
        
        System.out.println("\nHow many people would you like to start with? \nI would reccomend over 25 for a good simulation");
        int numOfPeople = scanner.nextInt();
        
        System.out.println("\nWhat would you like the frequency of transmission to be? \nEnter a % from 1 - 100");
        int userTransmission = scanner.nextInt();
        
        setTitle(title);
        this.getContentPane().setPreferredSize(new Dimension(frameWidth, frameHeight));
        this.getContentPane().setBackground(Color.LIGHT_GRAY);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setResizable(false);
        this.pack();
        this.toFront();
        this.setVisible(true);
            
        for (int i = 0; i < numOfPeople; i++){
            int startX = (int) (Math.random() * 20 + 1) * 50;
            int startY = (int) (Math.random() * 13 + 1) * 50;
            blackCircles.add(new Point(startX, startY));
        }
    
        for (int i = 0; i < 1; i++){
            int greenX = (int) (Math.random() * 20 + 1) * 50;
            int greenY = (int) (Math.random() * 13 + 1) * 50;
            greenCircles.add(new Point(greenX, greenY));
        }
        
        timer = new Timer(200, new ActionListener()
        {
            int currentGen = 0;
            public void actionPerformed(ActionEvent e) {
                if (currentGen < numOfGens) {
                    currentGen++;
                    System.out.print("\nGeneration " + currentGen);
                    
                    // Move black circles
                    for (Point p : blackCircles) {
                        imageMovement(p);
                    }

                    // Move green circles
                    for (Point p : greenCircles) {
                        imageMovement(p);
                    }
                    
                    int transmission = (int) (Math.random() *100) + 1;
                    
                    ArrayList<Point> newGreenCircles = new ArrayList<>();
                    for (Point g : greenCircles) {
                        Rectangle greenRect = new Rectangle(g.x, g.y, 50, 50);
                        
                        for (Point b : blackCircles) {
                            Rectangle blackRect = new Rectangle(b.x, b.y, 50, 50);
                            
                            if (blackRect.intersects(greenRect)&& transmission < userTransmission) {
                                newGreenCircles.add(b);
                            }
                        }
                    }
                    
                    blackCircles.removeAll(newGreenCircles);
                    greenCircles.addAll(newGreenCircles);
                    
                    repaint();
                } else {
                    ((Timer) e.getSource()).stop(); // stops the simulation
                }
            }
        }
        );
        timer.start();
        
        
    }
    public void imageMovement(Point p){
        int random = (int)Math.ceil(Math.random()*4); // a random number between 1 and 4 but always round up so as not to get 0
        //int random = (int)Math.ceil(Math.random()+3); // a random number between 1 and 4 but always round up so as not to get 0

        switch (random){
            case 1 : p.x = p.x + 50;
            repaint();
            //System.out.println("\nright");
            break;
            case 2 : p.x = p.x - 50;
            repaint();
            // System.out.println("\nleft");
            break;
            case 3 : p.y = p.y + 50;
            repaint();
            //System.out.println("\ndown");
            break;
            case 4 : p.y = p.y - 50;
            repaint();
            //System.out.println("\nup");
            break;
        }
        if (p.x<0){
            p.x = p.x + 50;
        } else if(p.x>950) {
            p.x = p.x - 50;
        } else if (p.y<0){
            p.y = p.y + 50;
        } else if (p.y>600){
            p.y = p.y - 50;
        }
    }
    public void paint(Graphics g) {
        super.paint(g);

        ImageIcon blackCircle = new ImageIcon("BlackCircle.png");
        ImageIcon greenCircle = new ImageIcon("GreenCircle.png");

        int greenWidth = greenCircle.getIconWidth(); 
        int greenHeight = greenCircle.getIconHeight();
        
        int BlackWidth = blackCircle.getIconWidth(); 
        int BlackHeight = blackCircle.getIconHeight();
        
        //System.out.println("WIDTH AND HEIGHT: " +BlackWidth +" " +  BlackHeight +" " + greenWidth +" " + greenHeight);

        for (Point p : blackCircles) {
            blackCircle.paintIcon(this, g, p.x, p.y);
        }
        for (Point p : greenCircles) {
            greenCircle.paintIcon(this, g, p.x, p.y);
        }
    }
    public void moveImage(){
        for (int i = 0; i>5; i++){
            try{
                int random = (int)Math.round(Math.random()*4);

                switch (random){
                    case 0 : imageX = imageX + 200;
                    repaint();
                    System.out.println("right");
                    break;
                    case 1 : imageX = imageX - 200;
                    repaint();
                     System.out.println("right");
                    break;
                    case 2 : imageY = imageY + 200;
                    repaint();
                    System.out.println("right");
                    break;
                    case 3 : imageY = imageY - 200;
                    repaint();
                    System.out.println("right");
                    break;
                }
            }
            catch (Exception ie){
                ie.printStackTrace();
            }
        }
    }
}
